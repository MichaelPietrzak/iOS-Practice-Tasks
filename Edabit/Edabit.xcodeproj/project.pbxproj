// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 56;
	objects = {

/* Begin PBXBuildFile section */
		4C00F7702BBFF05B00161C5D /* Say hello to guests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C00F76F2BBFF05B00161C5D /* Say hello to guests.swift */; };
		4C00F7742BBFF8BB00161C5D /* Four passengers and driver.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C00F7732BBFF8BB00161C5D /* Four passengers and driver.swift */; };
		4C03FEB32BA645A800EFB331 /* Get the century.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C03FEB22BA645A800EFB331 /* Get the century.swift */; };
		4C03FEB72BA64D0400EFB331 /* Vowel replacer.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C03FEB62BA64D0400EFB331 /* Vowel replacer.swift */; };
		4C10BE1D2B7B63590058C33A /* Tile teamwork tactics.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C10BE1C2B7B63590058C33A /* Tile teamwork tactics.swift */; };
		4C10BE1F2B7B702D0058C33A /* Find the bug; checking even numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C10BE1E2B7B702D0058C33A /* Find the bug; checking even numbers.swift */; };
		4C10BE212B7B74D80058C33A /* Calculate the profit.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C10BE202B7B74D80058C33A /* Calculate the profit.swift */; };
		4C10BE232B7CAAC90058C33A /* Get word count.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C10BE222B7CAAC90058C33A /* Get word count.swift */; };
		4C10BE252B7CAF3D0058C33A /* Return number of parameters.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C10BE242B7CAF3D0058C33A /* Return number of parameters.swift */; };
		4C10BE272B7CB24A0058C33A /* Next element in sequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C10BE262B7CB24A0058C33A /* Next element in sequence.swift */; };
		4C10BE292B7CB8550058C33A /* Average of elements as whole number.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C10BE282B7CB8550058C33A /* Average of elements as whole number.swift */; };
		4C10BE2D2B7CD17A0058C33A /* Max weight allowed.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C10BE2C2B7CD17A0058C33A /* Max weight allowed.swift */; };
		4C12D1EC2B95F660003FCA65 /* Chocolate dilemma.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C12D1EB2B95F660003FCA65 /* Chocolate dilemma.swift */; };
		4C12D1EE2B9609BA003FCA65 /* Shuffle the name.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C12D1ED2B9609BA003FCA65 /* Shuffle the name.swift */; };
		4C134C1B2B62A4040002ED5E /* Is the string empty.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C134C1A2B62A4040002ED5E /* Is the string empty.swift */; };
		4C134C1D2B62A7770002ED5E /* Using the && Operator.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C134C1C2B62A7770002ED5E /* Using the && Operator.swift */; };
		4C13AFC92B876462009D461F /* Purge and organize.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C13AFC82B876462009D461F /* Purge and organize.swift */; };
		4C13AFCB2B8765E4009D461F /* Factorize number.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C13AFCA2B8765E4009D461F /* Factorize number.swift */; };
		4C13AFCD2B876ABA009D461F /* Calculate determinant 2x2 Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C13AFCC2B876ABA009D461F /* Calculate determinant 2x2 Matrix.swift */; };
		4C13AFCF2B878EB3009D461F /* Product of all odd integers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C13AFCE2B878EB3009D461F /* Product of all odd integers.swift */; };
		4C1A5F6C2B6FD1D000B460F0 /* Return a string as integer.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C1A5F6B2B6FD1D000B460F0 /* Return a string as integer.swift */; };
		4C1AD32A2B5D9B46007244B3 /* Convert hours and minutes into seconds.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C1AD3292B5D9B46007244B3 /* Convert hours and minutes into seconds.swift */; };
		4C1AEB4C2B55E1E7001093F4 /* Basic Variable Assignment.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C1AEB4B2B55E1E7001093F4 /* Basic Variable Assignment.swift */; };
		4C22F1B32B79712D00386740 /* Largest number in array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C22F1B22B79712D00386740 /* Largest number in array.swift */; };
		4C22F1B52B79725100386740 /* Difference of max and min numbers in array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C22F1B42B79725100386740 /* Difference of max and min numbers in array.swift */; };
		4C22F1B92B79778600386740 /* FizzBuzz Interview Question.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C22F1B82B79778600386740 /* FizzBuzz Interview Question.swift */; };
		4C22F1BB2B797A7F00386740 /* Check if the same case.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C22F1BA2B797A7F00386740 /* Check if the same case.swift */; };
		4C26AAAB2B52AB340038E064 /* Buggy Code - Part 1.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C26AAAA2B52AB340038E064 /* Buggy Code - Part 1.swift */; };
		4C26AAAD2B52AD7D0038E064 /* Return the first element in array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C26AAAC2B52AD7D0038E064 /* Return the first element in array.swift */; };
		4C2771D32B616BCF00130332 /* less than 100.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C2771D22B616BCF00130332 /* less than 100.swift */; };
		4C2771D52B61753800130332 /* Football Points.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C2771D42B61753800130332 /* Football Points.swift */; };
		4C34BA252B500A8000F60A9E /* Is the number less or equal to zero.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C34BA242B500A8000F60A9E /* Is the number less or equal to zero.swift */; };
		4C34BA272B500BB000F60A9E /* Are the numbers equal.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C34BA262B500BB000F60A9E /* Are the numbers equal.swift */; };
		4C35E0C82B4B2AC3009ECE9A /* main.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C35E0C72B4B2AC3009ECE9A /* main.swift */; };
		4C35E0CF2B4B2BC8009ECE9A /* Return Sum of Two Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C35E0CE2B4B2BC8009ECE9A /* Return Sum of Two Numbers.swift */; };
		4C35E7372B723EC0002BFF78 /* Nth even number.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C35E7362B723EC0002BFF78 /* Nth even number.swift */; };
		4C35E7392B725C1B002BFF78 /* Hello-Hello World-World.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C35E7382B725C1B002BFF78 /* Hello-Hello World-World.swift */; };
		4C35E73B2B726854002BFF78 /* Triangular number sequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C35E73A2B726854002BFF78 /* Triangular number sequence.swift */; };
		4C35E73D2B726B30002BFF78 /* No conditionals.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C35E73C2B726B30002BFF78 /* No conditionals.swift */; };
		4C37508D2B5156EE00318140 /* Return the remainder from two numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C37508C2B5156EE00318140 /* Return the remainder from two numbers.swift */; };
		4C37508F2B515AC800318140 /* Convert Hours into Seconds.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C37508E2B515AC800318140 /* Convert Hours into Seconds.swift */; };
		4C37AC8A2B7AAACD000B6062 /* Add numbers from single number.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C37AC892B7AAACD000B6062 /* Add numbers from single number.swift */; };
		4C37AC8C2B7AAEE4000B6062 /* Find the index.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C37AC8B2B7AAEE4000B6062 /* Find the index.swift */; };
		4C37AC8E2B7AB085000B6062 /* Convert numbers to string of dashes.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C37AC8D2B7AB085000B6062 /* Convert numbers to string of dashes.swift */; };
		4C37AC902B7AB363000B6062 /* Count syllables.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C37AC8F2B7AB363000B6062 /* Count syllables.swift */; };
		4C37AC922B7AB6D7000B6062 /* Eliminate odd numbers within array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C37AC912B7AB6D7000B6062 /* Eliminate odd numbers within array.swift */; };
		4C37AC942B7ABAAC000B6062 /* Hurdle jump.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C37AC932B7ABAAC000B6062 /* Hurdle jump.swift */; };
		4C37AC962B7ABCF5000B6062 /* Buggy Code.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C37AC952B7ABCF5000B6062 /* Buggy Code.swift */; };
		4C3886B42BB5C3540079B749 /* Upper or Lower case.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3886B32BB5C3540079B749 /* Upper or Lower case.swift */; };
		4C3886B82BB5D0730079B749 /* Sort an array by string length.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3886B72BB5D0730079B749 /* Sort an array by string length.swift */; };
		4C3A4D102BC57C650040D7F6 /* Remove first and last char.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3A4D0F2BC57C650040D7F6 /* Remove first and last char.swift */; };
		4C3A4D142BC57FE20040D7F6 /* FInd the missing number.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3A4D132BC57FE20040D7F6 /* FInd the missing number.swift */; };
		4C3B72FA2B5D9D8A00B84120 /* The farm problem.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3B72F92B5D9D8A00B84120 /* The farm problem.swift */; };
		4C3B72FE2B5DA26500B84120 /* Boolean to String conversion.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3B72FD2B5DA26500B84120 /* Boolean to String conversion.swift */; };
		4C3B73002B5DA42D00B84120 /* Profitable Gamble.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3B72FF2B5DA42D00B84120 /* Profitable Gamble.swift */; };
		4C3D090A2BA0621F007063B2 /* Moving to the end.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3D09092BA0621F007063B2 /* Moving to the end.swift */; };
		4C3D090E2BA073E7007063B2 /* Repeat same item multiple times.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3D090D2BA073E7007063B2 /* Repeat same item multiple times.swift */; };
		4C3DFB2D2B8E0A8000C065B1 /* Minimum removals to make sum even.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3DFB2C2B8E0A8000C065B1 /* Minimum removals to make sum even.swift */; };
		4C3DFB2F2B8E0FE100C065B1 /* Omnipresent value.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3DFB2E2B8E0FE100C065B1 /* Omnipresent value.swift */; };
		4C3DFB312B8E3B2D00C065B1 /* Strange pair.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3DFB302B8E3B2D00C065B1 /* Strange pair.swift */; };
		4C3DFB332B8E3DD400C065B1 /* Capitalize the names.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C3DFB322B8E3DD400C065B1 /* Capitalize the names.swift */; };
		4C405D7A2BC6671500AC4769 /* Older than me.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C405D792BC6671500AC4769 /* Older than me.swift */; };
		4C405D7E2BC67E2400AC4769 /* Convert to decimal notation.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C405D7D2BC67E2400AC4769 /* Convert to decimal notation.swift */; };
		4C46C79F2B8F36E700558986 /* Matchstick houses.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C46C79E2B8F36E700558986 /* Matchstick houses.swift */; };
		4C46C7A12B8F39BD00558986 /* Exists a number higher.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C46C7A02B8F39BD00558986 /* Exists a number higher.swift */; };
		4C46C7A32B8F416A00558986 /* Reverse order of words.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C46C7A22B8F416A00558986 /* Reverse order of words.swift */; };
		4C46C7A52B8F59C600558986 /* How many solutions quadratic have.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C46C7A42B8F59C600558986 /* How many solutions quadratic have.swift */; };
		4C4859BD2BC437F00089C9A8 /* Total volume of all boxes.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C4859BC2BC437F00089C9A8 /* Total volume of all boxes.swift */; };
		4C4859BF2BC439C30089C9A8 /* Days in month.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C4859BE2BC439C30089C9A8 /* Days in month.swift */; };
		4C4B3C722B6939E8005A1EE5 /* Frames per second.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C4B3C712B6939E8005A1EE5 /* Frames per second.swift */; };
		4C4B3C742B693F53005A1EE5 /* Flip the boolean.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C4B3C732B693F53005A1EE5 /* Flip the boolean.swift */; };
		4C4B58752B74E265005F61B9 /* Maximum difference.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C4B58742B74E265005F61B9 /* Maximum difference.swift */; };
		4C52B9732BA18C85008C7A5E /* Find smallest and biggest number.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C52B9722BA18C85008C7A5E /* Find smallest and biggest number.swift */; };
		4C52B9752BA191FB008C7A5E /* Negative image.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C52B9742BA191FB008C7A5E /* Negative image.swift */; };
		4C5462292B6BB03F0045E851 /* Return negative.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C5462282B6BB03F0045E851 /* Return negative.swift */; };
		4C54622B2B6BB56B0045E851 /* Reverse an array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C54622A2B6BB56B0045E851 /* Reverse an array.swift */; };
		4C5A5ED32BB2E70C00AA7158 /* Even odd partition.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C5A5ED22BB2E70C00AA7158 /* Even odd partition.swift */; };
		4C5A5ED52BB2EB7D00AA7158 /* GCD of two numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C5A5ED42BB2EB7D00AA7158 /* GCD of two numbers.swift */; };
		4C5C609A2B88AF04008B9723 /* Equality of 3 values.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C5C60992B88AF04008B9723 /* Equality of 3 values.swift */; };
		4C5C609C2B88B492008B9723 /* Sum of cubes.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C5C609B2B88B492008B9723 /* Sum of cubes.swift */; };
		4C5C609E2B88B725008B9723 /* Odd up, even down.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C5C609D2B88B725008B9723 /* Odd up, even down.swift */; };
		4C5C60A02B88C2F2008B9723 /* To the power.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C5C609F2B88C2F2008B9723 /* To the power.swift */; };
		4C5CCD972B7A65060047090B /* Missing third angle.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C5CCD962B7A65060047090B /* Missing third angle.swift */; };
		4C5F31282B5427BF0013E75E /* Power Calculator.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C5F31272B5427BF0013E75E /* Power Calculator.swift */; };
		4C5F312A2B5428CD0013E75E /* Inches to Feet.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C5F31292B5428CC0013E75E /* Inches to Feet.swift */; };
		4C621C5F2B8678C60046237F /* Total number of unique characters.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C621C5E2B8678C60046237F /* Total number of unique characters.swift */; };
		4C621C612B8688210046237F /* Same number of unique elements.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C621C602B8688210046237F /* Same number of unique elements.swift */; };
		4C621C632B868F3E0046237F /* Absolute sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C621C622B868F3E0046237F /* Absolute sum.swift */; };
		4C621C652B869CCE0046237F /* Count instances of character in string.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C621C642B869CCE0046237F /* Count instances of character in string.swift */; };
		4C621C672B86B6FE0046237F /* Four letter strings.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C621C662B86B6FE0046237F /* Four letter strings.swift */; };
		4C624DC72BAF11E500388AC8 /* String contains only identical characters.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C624DC62BAF11E500388AC8 /* String contains only identical characters.swift */; };
		4C624DC92BAF143C00388AC8 /* Count ones in 2D Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C624DC82BAF143C00388AC8 /* Count ones in 2D Array.swift */; };
		4C6780B72B5AB020006E4691 /* Concatenate First and Last Name into String.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C6780B62B5AB020006E4691 /* Concatenate First and Last Name into String.swift */; };
		4C6780B92B5AB221006E4691 /* Sum of polygon angles.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C6780B82B5AB221006E4691 /* Sum of polygon angles.swift */; };
		4C67A1DA2BAAD7970022B704 /* Numbers to arrays and vice versa.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C67A1D92BAAD7970022B704 /* Numbers to arrays and vice versa.swift */; };
		4C67A1DC2BAAEEFD0022B704 /* Sort numbers in ascending order.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C67A1DB2BAAEEFD0022B704 /* Sort numbers in ascending order.swift */; };
		4C67A1DE2BAC1E8C0022B704 /* Squares and cubes.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C67A1DD2BAC1E8C0022B704 /* Squares and cubes.swift */; };
		4C67A1E02BAC26940022B704 /* X and Y coordinates.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C67A1DF2BAC26940022B704 /* X and Y coordinates.swift */; };
		4C6ADD0B2B4E8C3F0087971C /* Convert Minutes into Seconds.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C6ADD0A2B4E8C3F0087971C /* Convert Minutes into Seconds.swift */; };
		4C6ADD0D2B4E8EF50087971C /* Find the Perimeter of a Rectangle.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C6ADD0C2B4E8EF50087971C /* Find the Perimeter of a Rectangle.swift */; };
		4C6CD7C22BCAA5BB00560F83 /* Calculate the mean.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C6CD7C12BCAA5BB00560F83 /* Calculate the mean.swift */; };
		4C6CD7C42BCAA95700560F83 /* Return first and last elements in array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C6CD7C32BCAA95700560F83 /* Return first and last elements in array.swift */; };
		4C7659782B4D5E6E0023DF20 /* Area of a Triangle.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C7659772B4D5E6E0023DF20 /* Area of a Triangle.swift */; };
		4C76597A2B4D62AB0023DF20 /* Return Next Number from the Integer Passed.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C7659792B4D62AB0023DF20 /* Return Next Number from the Integer Passed.swift */; };
		4C7B8C912B935B9900483B5A /* Little dictionary.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C7B8C902B935B9900483B5A /* Little dictionary.swift */; };
		4C7B8C932B935CAA00483B5A /* Filter by digit length.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C7B8C922B935CAA00483B5A /* Filter by digit length.swift */; };
		4C8231012B7F8289008C39B2 /* Even number generator.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C8231002B7F8289008C39B2 /* Even number generator.swift */; };
		4C8231032B7F847C008C39B2 /* Find the smallest number in array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C8231022B7F847C008C39B2 /* Find the smallest number in array.swift */; };
		4C8231052B7F8681008C39B2 /* Generate countdown of numbers in array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C8231042B7F8681008C39B2 /* Generate countdown of numbers in array.swift */; };
		4C8231072B7F8A8F008C39B2 /* Amplify the multiples of four.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C8231062B7F8A8F008C39B2 /* Amplify the multiples of four.swift */; };
		4C828FAB2B56CC1A0042153A /* Maximum Edge of a triangle.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C828FAA2B56CC1A0042153A /* Maximum Edge of a triangle.swift */; };
		4C828FAD2B56D0CE0042153A /* Correct the Mistakes.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C828FAC2B56D0CE0042153A /* Correct the Mistakes.swift */; };
		4C854A442B838CFA0068A01D /* Word endings.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C854A432B838CFA0068A01D /* Word endings.swift */; };
		4C854A462B8391C80068A01D /* Multiply by length.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C854A452B8391C80068A01D /* Multiply by length.swift */; };
		4C854A482B83933E0068A01D /* String a palindrome.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C854A472B83933E0068A01D /* String a palindrome.swift */; };
		4C85F4542B70FC6A00856305 /* Unlucky 13.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C85F4532B70FC6A00856305 /* Unlucky 13.swift */; };
		4C85F4562B7102C100856305 /* Compare strings by count of characters.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C85F4552B7102C100856305 /* Compare strings by count of characters.swift */; };
		4C85F4582B71086C00856305 /* Re-form the word.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C85F4572B71086C00856305 /* Re-form the word.swift */; };
		4C85F45A2B710A5F00856305 /* String to integer and vice versa.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C85F4592B710A5F00856305 /* String to integer and vice versa.swift */; };
		4C87D5212BB7169500969644 /* Xs and Os, Nobody knows.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C87D5202BB7169500969644 /* Xs and Os, Nobody knows.swift */; };
		4C87D5252BB7207100969644 /* Product divisible by sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C87D5242BB7207100969644 /* Product divisible by sum.swift */; };
		4C87F7382B7E41F900DB2E31 /* Alphabet soup.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C87F7372B7E41F800DB2E31 /* Alphabet soup.swift */; };
		4C87F73A2B7E43B200DB2E31 /* Find the discount.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C87F7392B7E43B200DB2E31 /* Find the discount.swift */; };
		4C87F73C2B7E45A800DB2E31 /* How much is true.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C87F73B2B7E45A800DB2E31 /* How much is true.swift */; };
		4C87F73E2B7E476E00DB2E31 /* Human, cat and dog years.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C87F73D2B7E476E00DB2E31 /* Human, cat and dog years.swift */; };
		4C8952E22B9855F80026A546 /* Odd up, even down - N times.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C8952E12B9855F80026A546 /* Odd up, even down - N times.swift */; };
		4C8952E42B985F6D0026A546 /* Find the second largest number.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C8952E32B985F6D0026A546 /* Find the second largest number.swift */; };
		4C8F28BE2B4C5901006373C7 /* Convert Age to Days.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C8F28BD2B4C5901006373C7 /* Convert Age to Days.swift */; };
		4C9C54922B6ECE08008BD33C /* Slice of pie.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C9C54912B6ECE08008BD33C /* Slice of pie.swift */; };
		4C9C54942B6EDFBE008BD33C /* Check string for spaces.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C9C54932B6EDFBE008BD33C /* Check string for spaces.swift */; };
		4C9DA8852B594F11003E4612 /* Basketball Points.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C9DA8842B594F11003E4612 /* Basketball Points.swift */; };
		4C9DA8872B595D22003E4612 /* Divides Evenly.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C9DA8862B595D22003E4612 /* Divides Evenly.swift */; };
		4CA90F262B6A3C1A00397D78 /* Is the number even or odd.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CA90F252B6A3C1A00397D78 /* Is the number even or odd.swift */; };
		4CA90F282B6A436000397D78 /* Two makes ten.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CA90F272B6A436000397D78 /* Two makes ten.swift */; };
		4CA90F2A2B6A45BD00397D78 /* Is string odd or even.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CA90F292B6A45BD00397D78 /* Is string odd or even.swift */; };
		4CA90F2C2B6A4CBB00397D78 /* Buggy Code - Part 3.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CA90F2B2B6A4CBB00397D78 /* Buggy Code - Part 3.swift */; };
		4CA90F302B6A62B000397D78 /* Area of rectangle.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CA90F2F2B6A62B000397D78 /* Area of rectangle.swift */; };
		4CA90F322B6A661700397D78 /* Buggy code - Part 4.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CA90F312B6A661700397D78 /* Buggy code - Part 4.swift */; };
		4CA90F342B6A687900397D78 /* Find out the leap year.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CA90F332B6A687900397D78 /* Find out the leap year.swift */; };
		4CAFB6AF2BBD5561007C7B20 /* Convenience store.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CAFB6AE2BBD5561007C7B20 /* Convenience store.swift */; };
		4CAFB6B12BBD5DA9007C7B20 /* Hamming distance.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CAFB6B02BBD5DA9007C7B20 /* Hamming distance.swift */; };
		4CB16ECB2B57BB82006EC617 /* Name Greeting.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CB16ECA2B57BB82006EC617 /* Name Greeting.swift */; };
		4CB16ECD2B57BD4F006EC617 /* Check integer if divisible.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CB16ECC2B57BD4F006EC617 /* Check integer if divisible.swift */; };
		4CB254D12BCC44DE003535FF /* Capitalize the first letter of each word.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CB254D02BCC44DE003535FF /* Capitalize the first letter of each word.swift */; };
		4CB254D32BCC4D19003535FF /* ATM PIN code validation.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CB254D22BCC4D19003535FF /* ATM PIN code validation.swift */; };
		4CB70C802B73A06900E688DB /* Fix basic calculator.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CB70C7F2B73A06900E688DB /* Fix basic calculator.swift */; };
		4CB70C822B73C5D400E688DB /* Buggy code - Part 5.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CB70C812B73C5D400E688DB /* Buggy code - Part 5.swift */; };
		4CB70C842B73CC7000E688DB /* Recreating abs() function.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CB70C832B73CC7000E688DB /* Recreating abs() function.swift */; };
		4CB70C862B73CE8A00E688DB /* Amazing Edabit.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CB70C852B73CE8A00E688DB /* Amazing Edabit.swift */; };
		4CB99E4A2B63EE7E002FC554 /* Minimal1- If boolean then boolean.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CB99E492B63EE7E002FC554 /* Minimal1- If boolean then boolean.swift */; };
		4CB99E4C2B63F0A8002FC554 /* Fix the expression.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CB99E4B2B63F0A8002FC554 /* Fix the expression.swift */; };
		4CC0FB892B86644600F4D774 /* Integer digits count.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CC0FB882B86644600F4D774 /* Integer digits count.swift */; };
		4CC3A66B2B6D28E000C72829 /* Free coffee cups.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CC3A66A2B6D28E000C72829 /* Free coffee cups.swift */; };
		4CC3A66D2B6D382200C72829 /* Return last element in array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CC3A66C2B6D382200C72829 /* Return last element in array.swift */; };
		4CC6A9922BA3807A0025F5DD /* Prefixes vs. Suffixes.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CC6A9912BA3807A0025F5DD /* Prefixes vs. Suffixes.swift */; };
		4CC6A9942BA387840025F5DD /* International greetings.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CC6A9932BA387840025F5DD /* International greetings.swift */; };
		4CCB4FC92BC929D100C72C5D /* Sum of digits between two numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CCB4FC82BC929D100C72C5D /* Sum of digits between two numbers.swift */; };
		4CCB4FCB2BC93F0700C72C5D /* Return the highest and lowest numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CCB4FCA2BC93F0700C72C5D /* Return the highest and lowest numbers.swift */; };
		4CCC0C872BBEA32700DED27E /* Remove special characters from string.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CCC0C862BBEA32700DED27E /* Remove special characters from string.swift */; };
		4CCC0C8D2BBECD0900DED27E /* Sort numbers in descending order.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CCC0C8C2BBECD0900DED27E /* Sort numbers in descending order.swift */; };
		4CD066D72B69A7CA008952D1 /* Movie theatre admittance.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CD066D62B69A7CA008952D1 /* Movie theatre admittance.swift */; };
		4CD39F872B9735A700D4837C /* Sum of two smallest numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CD39F862B9735A700D4837C /* Sum of two smallest numbers.swift */; };
		4CD39F8B2B97957100D4837C /* Secret society.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CD39F8A2B97957100D4837C /* Secret society.swift */; };
		4CD43B692B6F9B6B00F5AA79 /* Check if array contains a number.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CD43B682B6F9B6B00F5AA79 /* Check if array contains a number.swift */; };
		4CD43B6B2B6F9F2B00F5AA79 /* The modulus operator function.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CD43B6A2B6F9F2B00F5AA79 /* The modulus operator function.swift */; };
		4CD9C9EC2B5EB53E00DD33FA /* Pair Management.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CD9C9EB2B5EB53E00DD33FA /* Pair Management.swift */; };
		4CD9C9EE2B5EBFCA00DD33FA /* Return something to me.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CD9C9ED2B5EBFCA00DD33FA /* Return something to me.swift */; };
		4CDA328C2BA455110090D2F0 /* Remove every vowel from a string.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CDA328B2BA455110090D2F0 /* Remove every vowel from a string.swift */; };
		4CDA328E2BA46C6F0090D2F0 /* Is the word an isogram.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CDA328D2BA46C6F0090D2F0 /* Is the word an isogram.swift */; };
		4CDED7C52BBC1C7D00AD2B60 /* Sum of all evens in matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CDED7C42BBC1C7D00AD2B60 /* Sum of all evens in matrix.swift */; };
		4CDED7C72BBC226A00AD2B60 /* Smaller string number.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CDED7C62BBC226A00AD2B60 /* Smaller string number.swift */; };
		4CE540462BA9774B00280A3F /* FInd the odd integer.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CE540452BA9774B00280A3F /* FInd the odd integer.swift */; };
		4CE540482BA9886100280A3F /* Nth smallest integer.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CE540472BA9886100280A3F /* Nth smallest integer.swift */; };
		4CE545112BCEB16A009A5359 /* Returning an Add function.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CE545102BCEB16A009A5359 /* Returning an Add function.swift */; };
		4CE545132BCECA27009A5359 /* Adding Suffixes.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CE545122BCECA27009A5359 /* Adding Suffixes.swift */; };
		4CE68A542B9B3510004B0285 /* Hitting the jackpot.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CE68A532B9B3510004B0285 /* Hitting the jackpot.swift */; };
		4CE68A562B9B3ABD004B0285 /* Chat room status.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CE68A552B9B3ABD004B0285 /* Chat room status.swift */; };
		4CF11DA22B99D02B0044F45B /* Reverse order of string.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CF11DA12B99D02B0044F45B /* Reverse order of string.swift */; };
		4CF11DA62B99F3000044F45B /* Check factors.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CF11DA52B99F3000044F45B /* Check factors.swift */; };
		4CF7B5572B763C4000F0D2FB /* Leap year function.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CF7B5562B763C4000F0D2FB /* Leap year function.swift */; };
		4CF7B5592B763F3100F0D2FB /* Half, Quarter and Eighth.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CF7B5582B763F3100F0D2FB /* Half, Quarter and Eighth.swift */; };
		4CF7B55B2B76417400F0D2FB /* Check if string ending match second string.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CF7B55A2B76417400F0D2FB /* Check if string ending match second string.swift */; };
		4CF7B55D2B7645A400F0D2FB /* Get the sum of all array elements.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CF7B55C2B7645A400F0D2FB /* Get the sum of all array elements.swift */; };
		4CF7B55F2B76481C00F0D2FB /* Convert number to month name.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CF7B55E2B76481C00F0D2FB /* Convert number to month name.swift */; };
		4CF7B5612B7656F800F0D2FB /* Is word singular or plural.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CF7B5602B7656F800F0D2FB /* Is word singular or plural.swift */; };
		4CF7B5632B76591300F0D2FB /* Find total number of digits the number has.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CF7B5622B76591300F0D2FB /* Find total number of digits the number has.swift */; };
		4CFB81642B84E67300D17CFF /* Filter repeating character strings.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CFB81632B84E67300D17CFF /* Filter repeating character strings.swift */; };
		4CFB81662B853E3200D17CFF /* Additive inverse.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CFB81652B853E3200D17CFF /* Additive inverse.swift */; };
		4CFB81682B85409F00D17CFF /* Between words.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CFB81672B85409F00D17CFF /* Between words.swift */; };
		4CFB816A2B854AAA00D17CFF /* Chinese zodiac.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CFB81692B854AAA00D17CFF /* Chinese zodiac.swift */; };
		4CFF792E2B5FF4CE006F2004 /* Are the number if equal.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CFF792D2B5FF4CE006F2004 /* Are the number if equal.swift */; };
		4CFF79302B5FF70B006F2004 /* Concatenating two integer arrays.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CFF792F2B5FF70B006F2004 /* Concatenating two integer arrays.swift */; };
		4CFF79322B5FF8A3006F2004 /* Multiple of 100.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4CFF79312B5FF8A3006F2004 /* Multiple of 100.swift */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		4C35E0C22B4B2AC3009ECE9A /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		4C00F76F2BBFF05B00161C5D /* Say hello to guests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Say hello to guests.swift"; sourceTree = "<group>"; };
		4C00F7732BBFF8BB00161C5D /* Four passengers and driver.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Four passengers and driver.swift"; sourceTree = "<group>"; };
		4C03FEB22BA645A800EFB331 /* Get the century.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Get the century.swift"; sourceTree = "<group>"; };
		4C03FEB62BA64D0400EFB331 /* Vowel replacer.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Vowel replacer.swift"; sourceTree = "<group>"; };
		4C10BE1C2B7B63590058C33A /* Tile teamwork tactics.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Tile teamwork tactics.swift"; sourceTree = "<group>"; };
		4C10BE1E2B7B702D0058C33A /* Find the bug; checking even numbers.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Find the bug; checking even numbers.swift"; sourceTree = "<group>"; };
		4C10BE202B7B74D80058C33A /* Calculate the profit.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Calculate the profit.swift"; sourceTree = "<group>"; };
		4C10BE222B7CAAC90058C33A /* Get word count.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Get word count.swift"; sourceTree = "<group>"; };
		4C10BE242B7CAF3D0058C33A /* Return number of parameters.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Return number of parameters.swift"; sourceTree = "<group>"; };
		4C10BE262B7CB24A0058C33A /* Next element in sequence.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Next element in sequence.swift"; sourceTree = "<group>"; };
		4C10BE282B7CB8550058C33A /* Average of elements as whole number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Average of elements as whole number.swift"; sourceTree = "<group>"; };
		4C10BE2C2B7CD17A0058C33A /* Max weight allowed.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Max weight allowed.swift"; sourceTree = "<group>"; };
		4C12D1EB2B95F660003FCA65 /* Chocolate dilemma.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Chocolate dilemma.swift"; sourceTree = "<group>"; };
		4C12D1ED2B9609BA003FCA65 /* Shuffle the name.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Shuffle the name.swift"; sourceTree = "<group>"; };
		4C134C1A2B62A4040002ED5E /* Is the string empty.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Is the string empty.swift"; sourceTree = "<group>"; };
		4C134C1C2B62A7770002ED5E /* Using the && Operator.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Using the && Operator.swift"; sourceTree = "<group>"; };
		4C13AFC82B876462009D461F /* Purge and organize.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Purge and organize.swift"; sourceTree = "<group>"; };
		4C13AFCA2B8765E4009D461F /* Factorize number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Factorize number.swift"; sourceTree = "<group>"; };
		4C13AFCC2B876ABA009D461F /* Calculate determinant 2x2 Matrix.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Calculate determinant 2x2 Matrix.swift"; sourceTree = "<group>"; };
		4C13AFCE2B878EB3009D461F /* Product of all odd integers.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Product of all odd integers.swift"; sourceTree = "<group>"; };
		4C1A5F6B2B6FD1D000B460F0 /* Return a string as integer.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Return a string as integer.swift"; sourceTree = "<group>"; };
		4C1AD3292B5D9B46007244B3 /* Convert hours and minutes into seconds.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Convert hours and minutes into seconds.swift"; sourceTree = "<group>"; };
		4C1AEB4B2B55E1E7001093F4 /* Basic Variable Assignment.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Basic Variable Assignment.swift"; sourceTree = "<group>"; };
		4C22F1B22B79712D00386740 /* Largest number in array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Largest number in array.swift"; sourceTree = "<group>"; };
		4C22F1B42B79725100386740 /* Difference of max and min numbers in array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Difference of max and min numbers in array.swift"; sourceTree = "<group>"; };
		4C22F1B82B79778600386740 /* FizzBuzz Interview Question.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "FizzBuzz Interview Question.swift"; sourceTree = "<group>"; };
		4C22F1BA2B797A7F00386740 /* Check if the same case.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Check if the same case.swift"; sourceTree = "<group>"; };
		4C26AAAA2B52AB340038E064 /* Buggy Code - Part 1.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Buggy Code - Part 1.swift"; sourceTree = "<group>"; };
		4C26AAAC2B52AD7D0038E064 /* Return the first element in array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Return the first element in array.swift"; sourceTree = "<group>"; };
		4C2771D22B616BCF00130332 /* less than 100.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "less than 100.swift"; sourceTree = "<group>"; };
		4C2771D42B61753800130332 /* Football Points.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Football Points.swift"; sourceTree = "<group>"; };
		4C34BA242B500A8000F60A9E /* Is the number less or equal to zero.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Is the number less or equal to zero.swift"; sourceTree = "<group>"; };
		4C34BA262B500BB000F60A9E /* Are the numbers equal.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Are the numbers equal.swift"; sourceTree = "<group>"; };
		4C35E0C42B4B2AC3009ECE9A /* Edabit */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = Edabit; sourceTree = BUILT_PRODUCTS_DIR; };
		4C35E0C72B4B2AC3009ECE9A /* main.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = main.swift; sourceTree = "<group>"; };
		4C35E0CE2B4B2BC8009ECE9A /* Return Sum of Two Numbers.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Return Sum of Two Numbers.swift"; sourceTree = "<group>"; };
		4C35E7362B723EC0002BFF78 /* Nth even number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Nth even number.swift"; sourceTree = "<group>"; };
		4C35E7382B725C1B002BFF78 /* Hello-Hello World-World.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Hello-Hello World-World.swift"; sourceTree = "<group>"; };
		4C35E73A2B726854002BFF78 /* Triangular number sequence.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Triangular number sequence.swift"; sourceTree = "<group>"; };
		4C35E73C2B726B30002BFF78 /* No conditionals.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "No conditionals.swift"; sourceTree = "<group>"; };
		4C37508C2B5156EE00318140 /* Return the remainder from two numbers.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Return the remainder from two numbers.swift"; sourceTree = "<group>"; };
		4C37508E2B515AC800318140 /* Convert Hours into Seconds.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Convert Hours into Seconds.swift"; sourceTree = "<group>"; };
		4C37AC892B7AAACD000B6062 /* Add numbers from single number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Add numbers from single number.swift"; sourceTree = "<group>"; };
		4C37AC8B2B7AAEE4000B6062 /* Find the index.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Find the index.swift"; sourceTree = "<group>"; };
		4C37AC8D2B7AB085000B6062 /* Convert numbers to string of dashes.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Convert numbers to string of dashes.swift"; sourceTree = "<group>"; };
		4C37AC8F2B7AB363000B6062 /* Count syllables.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Count syllables.swift"; sourceTree = "<group>"; };
		4C37AC912B7AB6D7000B6062 /* Eliminate odd numbers within array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Eliminate odd numbers within array.swift"; sourceTree = "<group>"; };
		4C37AC932B7ABAAC000B6062 /* Hurdle jump.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Hurdle jump.swift"; sourceTree = "<group>"; };
		4C37AC952B7ABCF5000B6062 /* Buggy Code.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Buggy Code.swift"; sourceTree = "<group>"; };
		4C3886B32BB5C3540079B749 /* Upper or Lower case.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Upper or Lower case.swift"; sourceTree = "<group>"; };
		4C3886B72BB5D0730079B749 /* Sort an array by string length.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Sort an array by string length.swift"; sourceTree = "<group>"; };
		4C3A4D0F2BC57C650040D7F6 /* Remove first and last char.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Remove first and last char.swift"; sourceTree = "<group>"; };
		4C3A4D132BC57FE20040D7F6 /* FInd the missing number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "FInd the missing number.swift"; sourceTree = "<group>"; };
		4C3B72F92B5D9D8A00B84120 /* The farm problem.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "The farm problem.swift"; sourceTree = "<group>"; };
		4C3B72FD2B5DA26500B84120 /* Boolean to String conversion.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Boolean to String conversion.swift"; sourceTree = "<group>"; };
		4C3B72FF2B5DA42D00B84120 /* Profitable Gamble.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Profitable Gamble.swift"; sourceTree = "<group>"; };
		4C3D09092BA0621F007063B2 /* Moving to the end.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Moving to the end.swift"; sourceTree = "<group>"; };
		4C3D090D2BA073E7007063B2 /* Repeat same item multiple times.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Repeat same item multiple times.swift"; sourceTree = "<group>"; };
		4C3DFB2C2B8E0A8000C065B1 /* Minimum removals to make sum even.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Minimum removals to make sum even.swift"; sourceTree = "<group>"; };
		4C3DFB2E2B8E0FE100C065B1 /* Omnipresent value.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Omnipresent value.swift"; sourceTree = "<group>"; };
		4C3DFB302B8E3B2D00C065B1 /* Strange pair.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Strange pair.swift"; sourceTree = "<group>"; };
		4C3DFB322B8E3DD400C065B1 /* Capitalize the names.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Capitalize the names.swift"; sourceTree = "<group>"; };
		4C405D792BC6671500AC4769 /* Older than me.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Older than me.swift"; sourceTree = "<group>"; };
		4C405D7D2BC67E2400AC4769 /* Convert to decimal notation.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Convert to decimal notation.swift"; sourceTree = "<group>"; };
		4C46C79E2B8F36E700558986 /* Matchstick houses.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Matchstick houses.swift"; sourceTree = "<group>"; };
		4C46C7A02B8F39BD00558986 /* Exists a number higher.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Exists a number higher.swift"; sourceTree = "<group>"; };
		4C46C7A22B8F416A00558986 /* Reverse order of words.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Reverse order of words.swift"; sourceTree = "<group>"; };
		4C46C7A42B8F59C600558986 /* How many solutions quadratic have.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "How many solutions quadratic have.swift"; sourceTree = "<group>"; };
		4C4859BC2BC437F00089C9A8 /* Total volume of all boxes.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Total volume of all boxes.swift"; sourceTree = "<group>"; };
		4C4859BE2BC439C30089C9A8 /* Days in month.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Days in month.swift"; sourceTree = "<group>"; };
		4C4B3C712B6939E8005A1EE5 /* Frames per second.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Frames per second.swift"; sourceTree = "<group>"; };
		4C4B3C732B693F53005A1EE5 /* Flip the boolean.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Flip the boolean.swift"; sourceTree = "<group>"; };
		4C4B58742B74E265005F61B9 /* Maximum difference.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Maximum difference.swift"; sourceTree = "<group>"; };
		4C52B9722BA18C85008C7A5E /* Find smallest and biggest number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Find smallest and biggest number.swift"; sourceTree = "<group>"; };
		4C52B9742BA191FB008C7A5E /* Negative image.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Negative image.swift"; sourceTree = "<group>"; };
		4C5462282B6BB03F0045E851 /* Return negative.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Return negative.swift"; sourceTree = "<group>"; };
		4C54622A2B6BB56B0045E851 /* Reverse an array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Reverse an array.swift"; sourceTree = "<group>"; };
		4C5A5ED22BB2E70C00AA7158 /* Even odd partition.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Even odd partition.swift"; sourceTree = "<group>"; };
		4C5A5ED42BB2EB7D00AA7158 /* GCD of two numbers.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "GCD of two numbers.swift"; sourceTree = "<group>"; };
		4C5C60992B88AF04008B9723 /* Equality of 3 values.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Equality of 3 values.swift"; sourceTree = "<group>"; };
		4C5C609B2B88B492008B9723 /* Sum of cubes.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Sum of cubes.swift"; sourceTree = "<group>"; };
		4C5C609D2B88B725008B9723 /* Odd up, even down.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Odd up, even down.swift"; sourceTree = "<group>"; };
		4C5C609F2B88C2F2008B9723 /* To the power.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "To the power.swift"; sourceTree = "<group>"; };
		4C5CCD962B7A65060047090B /* Missing third angle.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Missing third angle.swift"; sourceTree = "<group>"; };
		4C5F31272B5427BF0013E75E /* Power Calculator.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Power Calculator.swift"; sourceTree = "<group>"; };
		4C5F31292B5428CC0013E75E /* Inches to Feet.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Inches to Feet.swift"; sourceTree = "<group>"; };
		4C621C5E2B8678C60046237F /* Total number of unique characters.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Total number of unique characters.swift"; sourceTree = "<group>"; };
		4C621C602B8688210046237F /* Same number of unique elements.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Same number of unique elements.swift"; sourceTree = "<group>"; };
		4C621C622B868F3E0046237F /* Absolute sum.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Absolute sum.swift"; sourceTree = "<group>"; };
		4C621C642B869CCE0046237F /* Count instances of character in string.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Count instances of character in string.swift"; sourceTree = "<group>"; };
		4C621C662B86B6FE0046237F /* Four letter strings.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Four letter strings.swift"; sourceTree = "<group>"; };
		4C624DC62BAF11E500388AC8 /* String contains only identical characters.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "String contains only identical characters.swift"; sourceTree = "<group>"; };
		4C624DC82BAF143C00388AC8 /* Count ones in 2D Array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Count ones in 2D Array.swift"; sourceTree = "<group>"; };
		4C6780B62B5AB020006E4691 /* Concatenate First and Last Name into String.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Concatenate First and Last Name into String.swift"; sourceTree = "<group>"; };
		4C6780B82B5AB221006E4691 /* Sum of polygon angles.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Sum of polygon angles.swift"; sourceTree = "<group>"; };
		4C67A1D92BAAD7970022B704 /* Numbers to arrays and vice versa.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Numbers to arrays and vice versa.swift"; sourceTree = "<group>"; };
		4C67A1DB2BAAEEFD0022B704 /* Sort numbers in ascending order.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Sort numbers in ascending order.swift"; sourceTree = "<group>"; };
		4C67A1DD2BAC1E8C0022B704 /* Squares and cubes.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Squares and cubes.swift"; sourceTree = "<group>"; };
		4C67A1DF2BAC26940022B704 /* X and Y coordinates.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "X and Y coordinates.swift"; sourceTree = "<group>"; };
		4C6ADD0A2B4E8C3F0087971C /* Convert Minutes into Seconds.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Convert Minutes into Seconds.swift"; sourceTree = "<group>"; };
		4C6ADD0C2B4E8EF50087971C /* Find the Perimeter of a Rectangle.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Find the Perimeter of a Rectangle.swift"; sourceTree = "<group>"; };
		4C6CD7C12BCAA5BB00560F83 /* Calculate the mean.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Calculate the mean.swift"; sourceTree = "<group>"; };
		4C6CD7C32BCAA95700560F83 /* Return first and last elements in array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Return first and last elements in array.swift"; sourceTree = "<group>"; };
		4C7659772B4D5E6E0023DF20 /* Area of a Triangle.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Area of a Triangle.swift"; sourceTree = "<group>"; };
		4C7659792B4D62AB0023DF20 /* Return Next Number from the Integer Passed.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Return Next Number from the Integer Passed.swift"; sourceTree = "<group>"; };
		4C7B8C902B935B9900483B5A /* Little dictionary.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Little dictionary.swift"; sourceTree = "<group>"; };
		4C7B8C922B935CAA00483B5A /* Filter by digit length.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Filter by digit length.swift"; sourceTree = "<group>"; };
		4C8231002B7F8289008C39B2 /* Even number generator.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Even number generator.swift"; sourceTree = "<group>"; };
		4C8231022B7F847C008C39B2 /* Find the smallest number in array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Find the smallest number in array.swift"; sourceTree = "<group>"; };
		4C8231042B7F8681008C39B2 /* Generate countdown of numbers in array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Generate countdown of numbers in array.swift"; sourceTree = "<group>"; };
		4C8231062B7F8A8F008C39B2 /* Amplify the multiples of four.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Amplify the multiples of four.swift"; sourceTree = "<group>"; };
		4C828FAA2B56CC1A0042153A /* Maximum Edge of a triangle.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Maximum Edge of a triangle.swift"; sourceTree = "<group>"; };
		4C828FAC2B56D0CE0042153A /* Correct the Mistakes.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Correct the Mistakes.swift"; sourceTree = "<group>"; };
		4C854A432B838CFA0068A01D /* Word endings.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Word endings.swift"; sourceTree = "<group>"; };
		4C854A452B8391C80068A01D /* Multiply by length.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Multiply by length.swift"; sourceTree = "<group>"; };
		4C854A472B83933E0068A01D /* String a palindrome.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "String a palindrome.swift"; sourceTree = "<group>"; };
		4C85F4532B70FC6A00856305 /* Unlucky 13.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Unlucky 13.swift"; sourceTree = "<group>"; };
		4C85F4552B7102C100856305 /* Compare strings by count of characters.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Compare strings by count of characters.swift"; sourceTree = "<group>"; };
		4C85F4572B71086C00856305 /* Re-form the word.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Re-form the word.swift"; sourceTree = "<group>"; };
		4C85F4592B710A5F00856305 /* String to integer and vice versa.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "String to integer and vice versa.swift"; sourceTree = "<group>"; };
		4C87D5202BB7169500969644 /* Xs and Os, Nobody knows.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Xs and Os, Nobody knows.swift"; sourceTree = "<group>"; };
		4C87D5242BB7207100969644 /* Product divisible by sum.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Product divisible by sum.swift"; sourceTree = "<group>"; };
		4C87F7372B7E41F800DB2E31 /* Alphabet soup.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Alphabet soup.swift"; sourceTree = "<group>"; };
		4C87F7392B7E43B200DB2E31 /* Find the discount.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Find the discount.swift"; sourceTree = "<group>"; };
		4C87F73B2B7E45A800DB2E31 /* How much is true.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "How much is true.swift"; sourceTree = "<group>"; };
		4C87F73D2B7E476E00DB2E31 /* Human, cat and dog years.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Human, cat and dog years.swift"; sourceTree = "<group>"; };
		4C8952E12B9855F80026A546 /* Odd up, even down - N times.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Odd up, even down - N times.swift"; sourceTree = "<group>"; };
		4C8952E32B985F6D0026A546 /* Find the second largest number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Find the second largest number.swift"; sourceTree = "<group>"; };
		4C8F28BD2B4C5901006373C7 /* Convert Age to Days.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Convert Age to Days.swift"; sourceTree = "<group>"; };
		4C9C54912B6ECE08008BD33C /* Slice of pie.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Slice of pie.swift"; sourceTree = "<group>"; };
		4C9C54932B6EDFBE008BD33C /* Check string for spaces.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Check string for spaces.swift"; sourceTree = "<group>"; };
		4C9DA8842B594F11003E4612 /* Basketball Points.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Basketball Points.swift"; sourceTree = "<group>"; };
		4C9DA8862B595D22003E4612 /* Divides Evenly.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Divides Evenly.swift"; sourceTree = "<group>"; };
		4CA90F252B6A3C1A00397D78 /* Is the number even or odd.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Is the number even or odd.swift"; sourceTree = "<group>"; };
		4CA90F272B6A436000397D78 /* Two makes ten.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Two makes ten.swift"; sourceTree = "<group>"; };
		4CA90F292B6A45BD00397D78 /* Is string odd or even.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Is string odd or even.swift"; sourceTree = "<group>"; };
		4CA90F2B2B6A4CBB00397D78 /* Buggy Code - Part 3.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Buggy Code - Part 3.swift"; sourceTree = "<group>"; };
		4CA90F2F2B6A62B000397D78 /* Area of rectangle.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Area of rectangle.swift"; sourceTree = "<group>"; };
		4CA90F312B6A661700397D78 /* Buggy code - Part 4.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Buggy code - Part 4.swift"; sourceTree = "<group>"; };
		4CA90F332B6A687900397D78 /* Find out the leap year.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Find out the leap year.swift"; sourceTree = "<group>"; };
		4CAFB6AE2BBD5561007C7B20 /* Convenience store.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Convenience store.swift"; sourceTree = "<group>"; };
		4CAFB6B02BBD5DA9007C7B20 /* Hamming distance.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Hamming distance.swift"; sourceTree = "<group>"; };
		4CB16ECA2B57BB82006EC617 /* Name Greeting.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Name Greeting.swift"; sourceTree = "<group>"; };
		4CB16ECC2B57BD4F006EC617 /* Check integer if divisible.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Check integer if divisible.swift"; sourceTree = "<group>"; };
		4CB254D02BCC44DE003535FF /* Capitalize the first letter of each word.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Capitalize the first letter of each word.swift"; sourceTree = "<group>"; };
		4CB254D22BCC4D19003535FF /* ATM PIN code validation.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "ATM PIN code validation.swift"; sourceTree = "<group>"; };
		4CB70C7F2B73A06900E688DB /* Fix basic calculator.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Fix basic calculator.swift"; sourceTree = "<group>"; };
		4CB70C812B73C5D400E688DB /* Buggy code - Part 5.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Buggy code - Part 5.swift"; sourceTree = "<group>"; };
		4CB70C832B73CC7000E688DB /* Recreating abs() function.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Recreating abs() function.swift"; sourceTree = "<group>"; };
		4CB70C852B73CE8A00E688DB /* Amazing Edabit.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Amazing Edabit.swift"; sourceTree = "<group>"; };
		4CB99E492B63EE7E002FC554 /* Minimal1- If boolean then boolean.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Minimal1- If boolean then boolean.swift"; sourceTree = "<group>"; };
		4CB99E4B2B63F0A8002FC554 /* Fix the expression.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Fix the expression.swift"; sourceTree = "<group>"; };
		4CC0FB882B86644600F4D774 /* Integer digits count.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Integer digits count.swift"; sourceTree = "<group>"; };
		4CC3A66A2B6D28E000C72829 /* Free coffee cups.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Free coffee cups.swift"; sourceTree = "<group>"; };
		4CC3A66C2B6D382200C72829 /* Return last element in array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Return last element in array.swift"; sourceTree = "<group>"; };
		4CC6A9912BA3807A0025F5DD /* Prefixes vs. Suffixes.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Prefixes vs. Suffixes.swift"; sourceTree = "<group>"; };
		4CC6A9932BA387840025F5DD /* International greetings.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "International greetings.swift"; sourceTree = "<group>"; };
		4CCB4FC82BC929D100C72C5D /* Sum of digits between two numbers.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Sum of digits between two numbers.swift"; sourceTree = "<group>"; };
		4CCB4FCA2BC93F0700C72C5D /* Return the highest and lowest numbers.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Return the highest and lowest numbers.swift"; sourceTree = "<group>"; };
		4CCC0C862BBEA32700DED27E /* Remove special characters from string.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Remove special characters from string.swift"; sourceTree = "<group>"; };
		4CCC0C8C2BBECD0900DED27E /* Sort numbers in descending order.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Sort numbers in descending order.swift"; sourceTree = "<group>"; };
		4CD066D62B69A7CA008952D1 /* Movie theatre admittance.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Movie theatre admittance.swift"; sourceTree = "<group>"; };
		4CD39F862B9735A700D4837C /* Sum of two smallest numbers.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Sum of two smallest numbers.swift"; sourceTree = "<group>"; };
		4CD39F8A2B97957100D4837C /* Secret society.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Secret society.swift"; sourceTree = "<group>"; };
		4CD43B682B6F9B6B00F5AA79 /* Check if array contains a number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Check if array contains a number.swift"; sourceTree = "<group>"; };
		4CD43B6A2B6F9F2B00F5AA79 /* The modulus operator function.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "The modulus operator function.swift"; sourceTree = "<group>"; };
		4CD9C9EB2B5EB53E00DD33FA /* Pair Management.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Pair Management.swift"; sourceTree = "<group>"; };
		4CD9C9ED2B5EBFCA00DD33FA /* Return something to me.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Return something to me.swift"; sourceTree = "<group>"; };
		4CDA328B2BA455110090D2F0 /* Remove every vowel from a string.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Remove every vowel from a string.swift"; sourceTree = "<group>"; };
		4CDA328D2BA46C6F0090D2F0 /* Is the word an isogram.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Is the word an isogram.swift"; sourceTree = "<group>"; };
		4CDED7C42BBC1C7D00AD2B60 /* Sum of all evens in matrix.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Sum of all evens in matrix.swift"; sourceTree = "<group>"; };
		4CDED7C62BBC226A00AD2B60 /* Smaller string number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Smaller string number.swift"; sourceTree = "<group>"; };
		4CE540452BA9774B00280A3F /* FInd the odd integer.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "FInd the odd integer.swift"; sourceTree = "<group>"; };
		4CE540472BA9886100280A3F /* Nth smallest integer.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Nth smallest integer.swift"; sourceTree = "<group>"; };
		4CE545102BCEB16A009A5359 /* Returning an Add function.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Returning an Add function.swift"; sourceTree = "<group>"; };
		4CE545122BCECA27009A5359 /* Adding Suffixes.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Adding Suffixes.swift"; sourceTree = "<group>"; };
		4CE68A532B9B3510004B0285 /* Hitting the jackpot.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Hitting the jackpot.swift"; sourceTree = "<group>"; };
		4CE68A552B9B3ABD004B0285 /* Chat room status.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Chat room status.swift"; sourceTree = "<group>"; };
		4CF11DA12B99D02B0044F45B /* Reverse order of string.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Reverse order of string.swift"; sourceTree = "<group>"; };
		4CF11DA52B99F3000044F45B /* Check factors.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Check factors.swift"; sourceTree = "<group>"; };
		4CF7B5562B763C4000F0D2FB /* Leap year function.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Leap year function.swift"; sourceTree = "<group>"; };
		4CF7B5582B763F3100F0D2FB /* Half, Quarter and Eighth.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Half, Quarter and Eighth.swift"; sourceTree = "<group>"; };
		4CF7B55A2B76417400F0D2FB /* Check if string ending match second string.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Check if string ending match second string.swift"; sourceTree = "<group>"; };
		4CF7B55C2B7645A400F0D2FB /* Get the sum of all array elements.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Get the sum of all array elements.swift"; sourceTree = "<group>"; };
		4CF7B55E2B76481C00F0D2FB /* Convert number to month name.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Convert number to month name.swift"; sourceTree = "<group>"; };
		4CF7B5602B7656F800F0D2FB /* Is word singular or plural.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Is word singular or plural.swift"; sourceTree = "<group>"; };
		4CF7B5622B76591300F0D2FB /* Find total number of digits the number has.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Find total number of digits the number has.swift"; sourceTree = "<group>"; };
		4CFB81632B84E67300D17CFF /* Filter repeating character strings.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Filter repeating character strings.swift"; sourceTree = "<group>"; };
		4CFB81652B853E3200D17CFF /* Additive inverse.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Additive inverse.swift"; sourceTree = "<group>"; };
		4CFB81672B85409F00D17CFF /* Between words.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Between words.swift"; sourceTree = "<group>"; };
		4CFB81692B854AAA00D17CFF /* Chinese zodiac.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Chinese zodiac.swift"; sourceTree = "<group>"; };
		4CFF792D2B5FF4CE006F2004 /* Are the number if equal.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Are the number if equal.swift"; sourceTree = "<group>"; };
		4CFF792F2B5FF70B006F2004 /* Concatenating two integer arrays.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Concatenating two integer arrays.swift"; sourceTree = "<group>"; };
		4CFF79312B5FF8A3006F2004 /* Multiple of 100.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Multiple of 100.swift"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		4C35E0C12B4B2AC3009ECE9A /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		4C35E0BB2B4B2AC3009ECE9A = {
			isa = PBXGroup;
			children = (
				4C35E0C62B4B2AC3009ECE9A /* Edabit */,
				4C35E0C52B4B2AC3009ECE9A /* Products */,
			);
			sourceTree = "<group>";
		};
		4C35E0C52B4B2AC3009ECE9A /* Products */ = {
			isa = PBXGroup;
			children = (
				4C35E0C42B4B2AC3009ECE9A /* Edabit */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		4C35E0C62B4B2AC3009ECE9A /* Edabit */ = {
			isa = PBXGroup;
			children = (
				4C35E0C72B4B2AC3009ECE9A /* main.swift */,
				4C35E0CE2B4B2BC8009ECE9A /* Return Sum of Two Numbers.swift */,
				4C8F28BD2B4C5901006373C7 /* Convert Age to Days.swift */,
				4C7659772B4D5E6E0023DF20 /* Area of a Triangle.swift */,
				4C7659792B4D62AB0023DF20 /* Return Next Number from the Integer Passed.swift */,
				4C6ADD0A2B4E8C3F0087971C /* Convert Minutes into Seconds.swift */,
				4C6ADD0C2B4E8EF50087971C /* Find the Perimeter of a Rectangle.swift */,
				4C34BA242B500A8000F60A9E /* Is the number less or equal to zero.swift */,
				4C34BA262B500BB000F60A9E /* Are the numbers equal.swift */,
				4C37508C2B5156EE00318140 /* Return the remainder from two numbers.swift */,
				4C37508E2B515AC800318140 /* Convert Hours into Seconds.swift */,
				4C26AAAA2B52AB340038E064 /* Buggy Code - Part 1.swift */,
				4C26AAAC2B52AD7D0038E064 /* Return the first element in array.swift */,
				4C5F31272B5427BF0013E75E /* Power Calculator.swift */,
				4C5F31292B5428CC0013E75E /* Inches to Feet.swift */,
				4C1AEB4B2B55E1E7001093F4 /* Basic Variable Assignment.swift */,
				4CFF792D2B5FF4CE006F2004 /* Are the number if equal.swift */,
				4C828FAA2B56CC1A0042153A /* Maximum Edge of a triangle.swift */,
				4C828FAC2B56D0CE0042153A /* Correct the Mistakes.swift */,
				4CB16ECA2B57BB82006EC617 /* Name Greeting.swift */,
				4CB16ECC2B57BD4F006EC617 /* Check integer if divisible.swift */,
				4C9DA8842B594F11003E4612 /* Basketball Points.swift */,
				4C9DA8862B595D22003E4612 /* Divides Evenly.swift */,
				4C6780B62B5AB020006E4691 /* Concatenate First and Last Name into String.swift */,
				4C6780B82B5AB221006E4691 /* Sum of polygon angles.swift */,
				4C1AD3292B5D9B46007244B3 /* Convert hours and minutes into seconds.swift */,
				4C3B72F92B5D9D8A00B84120 /* The farm problem.swift */,
				4C3B72FD2B5DA26500B84120 /* Boolean to String conversion.swift */,
				4C3B72FF2B5DA42D00B84120 /* Profitable Gamble.swift */,
				4CD9C9EB2B5EB53E00DD33FA /* Pair Management.swift */,
				4CD9C9ED2B5EBFCA00DD33FA /* Return something to me.swift */,
				4CFF792F2B5FF70B006F2004 /* Concatenating two integer arrays.swift */,
				4CFF79312B5FF8A3006F2004 /* Multiple of 100.swift */,
				4C2771D22B616BCF00130332 /* less than 100.swift */,
				4C2771D42B61753800130332 /* Football Points.swift */,
				4C134C1A2B62A4040002ED5E /* Is the string empty.swift */,
				4CB99E492B63EE7E002FC554 /* Minimal1- If boolean then boolean.swift */,
				4C134C1C2B62A7770002ED5E /* Using the && Operator.swift */,
				4CB99E4B2B63F0A8002FC554 /* Fix the expression.swift */,
				4C4B3C712B6939E8005A1EE5 /* Frames per second.swift */,
				4C4B3C732B693F53005A1EE5 /* Flip the boolean.swift */,
				4CD066D62B69A7CA008952D1 /* Movie theatre admittance.swift */,
				4CA90F252B6A3C1A00397D78 /* Is the number even or odd.swift */,
				4CA90F272B6A436000397D78 /* Two makes ten.swift */,
				4CA90F292B6A45BD00397D78 /* Is string odd or even.swift */,
				4CA90F2B2B6A4CBB00397D78 /* Buggy Code - Part 3.swift */,
				4CA90F2F2B6A62B000397D78 /* Area of rectangle.swift */,
				4CA90F312B6A661700397D78 /* Buggy code - Part 4.swift */,
				4CA90F332B6A687900397D78 /* Find out the leap year.swift */,
				4C5462282B6BB03F0045E851 /* Return negative.swift */,
				4C54622A2B6BB56B0045E851 /* Reverse an array.swift */,
				4CC3A66A2B6D28E000C72829 /* Free coffee cups.swift */,
				4CC3A66C2B6D382200C72829 /* Return last element in array.swift */,
				4C9C54912B6ECE08008BD33C /* Slice of pie.swift */,
				4C9C54932B6EDFBE008BD33C /* Check string for spaces.swift */,
				4CD43B682B6F9B6B00F5AA79 /* Check if array contains a number.swift */,
				4CD43B6A2B6F9F2B00F5AA79 /* The modulus operator function.swift */,
				4C1A5F6B2B6FD1D000B460F0 /* Return a string as integer.swift */,
				4C85F4532B70FC6A00856305 /* Unlucky 13.swift */,
				4C85F4552B7102C100856305 /* Compare strings by count of characters.swift */,
				4C85F4572B71086C00856305 /* Re-form the word.swift */,
				4C85F4592B710A5F00856305 /* String to integer and vice versa.swift */,
				4C35E7362B723EC0002BFF78 /* Nth even number.swift */,
				4C35E7382B725C1B002BFF78 /* Hello-Hello World-World.swift */,
				4C35E73A2B726854002BFF78 /* Triangular number sequence.swift */,
				4C35E73C2B726B30002BFF78 /* No conditionals.swift */,
				4CB70C7F2B73A06900E688DB /* Fix basic calculator.swift */,
				4CB70C812B73C5D400E688DB /* Buggy code - Part 5.swift */,
				4CB70C832B73CC7000E688DB /* Recreating abs() function.swift */,
				4CB70C852B73CE8A00E688DB /* Amazing Edabit.swift */,
				4C4B58742B74E265005F61B9 /* Maximum difference.swift */,
				4CF7B5562B763C4000F0D2FB /* Leap year function.swift */,
				4CF7B5582B763F3100F0D2FB /* Half, Quarter and Eighth.swift */,
				4CF7B55A2B76417400F0D2FB /* Check if string ending match second string.swift */,
				4CF7B55C2B7645A400F0D2FB /* Get the sum of all array elements.swift */,
				4CF7B55E2B76481C00F0D2FB /* Convert number to month name.swift */,
				4CF7B5602B7656F800F0D2FB /* Is word singular or plural.swift */,
				4CF7B5622B76591300F0D2FB /* Find total number of digits the number has.swift */,
				4C22F1B22B79712D00386740 /* Largest number in array.swift */,
				4C22F1B42B79725100386740 /* Difference of max and min numbers in array.swift */,
				4C22F1B82B79778600386740 /* FizzBuzz Interview Question.swift */,
				4C22F1BA2B797A7F00386740 /* Check if the same case.swift */,
				4C5CCD962B7A65060047090B /* Missing third angle.swift */,
				4C37AC892B7AAACD000B6062 /* Add numbers from single number.swift */,
				4C37AC8B2B7AAEE4000B6062 /* Find the index.swift */,
				4C37AC8D2B7AB085000B6062 /* Convert numbers to string of dashes.swift */,
				4C37AC8F2B7AB363000B6062 /* Count syllables.swift */,
				4C37AC912B7AB6D7000B6062 /* Eliminate odd numbers within array.swift */,
				4C37AC932B7ABAAC000B6062 /* Hurdle jump.swift */,
				4C37AC952B7ABCF5000B6062 /* Buggy Code.swift */,
				4C10BE1C2B7B63590058C33A /* Tile teamwork tactics.swift */,
				4C10BE1E2B7B702D0058C33A /* Find the bug; checking even numbers.swift */,
				4C10BE202B7B74D80058C33A /* Calculate the profit.swift */,
				4C10BE222B7CAAC90058C33A /* Get word count.swift */,
				4C10BE242B7CAF3D0058C33A /* Return number of parameters.swift */,
				4C10BE262B7CB24A0058C33A /* Next element in sequence.swift */,
				4C10BE282B7CB8550058C33A /* Average of elements as whole number.swift */,
				4C10BE2C2B7CD17A0058C33A /* Max weight allowed.swift */,
				4C87F7372B7E41F800DB2E31 /* Alphabet soup.swift */,
				4C87F7392B7E43B200DB2E31 /* Find the discount.swift */,
				4C87F73B2B7E45A800DB2E31 /* How much is true.swift */,
				4C87F73D2B7E476E00DB2E31 /* Human, cat and dog years.swift */,
				4C8231002B7F8289008C39B2 /* Even number generator.swift */,
				4C8231022B7F847C008C39B2 /* Find the smallest number in array.swift */,
				4C8231042B7F8681008C39B2 /* Generate countdown of numbers in array.swift */,
				4C8231062B7F8A8F008C39B2 /* Amplify the multiples of four.swift */,
				4C854A432B838CFA0068A01D /* Word endings.swift */,
				4C854A452B8391C80068A01D /* Multiply by length.swift */,
				4C854A472B83933E0068A01D /* String a palindrome.swift */,
				4CFB81632B84E67300D17CFF /* Filter repeating character strings.swift */,
				4CFB81652B853E3200D17CFF /* Additive inverse.swift */,
				4CFB81672B85409F00D17CFF /* Between words.swift */,
				4CFB81692B854AAA00D17CFF /* Chinese zodiac.swift */,
				4CC0FB882B86644600F4D774 /* Integer digits count.swift */,
				4C621C5E2B8678C60046237F /* Total number of unique characters.swift */,
				4C621C602B8688210046237F /* Same number of unique elements.swift */,
				4C621C622B868F3E0046237F /* Absolute sum.swift */,
				4C621C642B869CCE0046237F /* Count instances of character in string.swift */,
				4C621C662B86B6FE0046237F /* Four letter strings.swift */,
				4C13AFC82B876462009D461F /* Purge and organize.swift */,
				4C13AFCA2B8765E4009D461F /* Factorize number.swift */,
				4C13AFCC2B876ABA009D461F /* Calculate determinant 2x2 Matrix.swift */,
				4C13AFCE2B878EB3009D461F /* Product of all odd integers.swift */,
				4C5C60992B88AF04008B9723 /* Equality of 3 values.swift */,
				4C5C609B2B88B492008B9723 /* Sum of cubes.swift */,
				4C5C609D2B88B725008B9723 /* Odd up, even down.swift */,
				4C5C609F2B88C2F2008B9723 /* To the power.swift */,
				4C3DFB2C2B8E0A8000C065B1 /* Minimum removals to make sum even.swift */,
				4C3DFB2E2B8E0FE100C065B1 /* Omnipresent value.swift */,
				4C3DFB302B8E3B2D00C065B1 /* Strange pair.swift */,
				4C3DFB322B8E3DD400C065B1 /* Capitalize the names.swift */,
				4C46C79E2B8F36E700558986 /* Matchstick houses.swift */,
				4C46C7A02B8F39BD00558986 /* Exists a number higher.swift */,
				4C46C7A22B8F416A00558986 /* Reverse order of words.swift */,
				4C46C7A42B8F59C600558986 /* How many solutions quadratic have.swift */,
				4C7B8C902B935B9900483B5A /* Little dictionary.swift */,
				4C7B8C922B935CAA00483B5A /* Filter by digit length.swift */,
				4C12D1EB2B95F660003FCA65 /* Chocolate dilemma.swift */,
				4C12D1ED2B9609BA003FCA65 /* Shuffle the name.swift */,
				4CD39F862B9735A700D4837C /* Sum of two smallest numbers.swift */,
				4CD39F8A2B97957100D4837C /* Secret society.swift */,
				4C8952E12B9855F80026A546 /* Odd up, even down - N times.swift */,
				4C8952E32B985F6D0026A546 /* Find the second largest number.swift */,
				4CF11DA12B99D02B0044F45B /* Reverse order of string.swift */,
				4CF11DA52B99F3000044F45B /* Check factors.swift */,
				4CE68A532B9B3510004B0285 /* Hitting the jackpot.swift */,
				4CE68A552B9B3ABD004B0285 /* Chat room status.swift */,
				4C3D09092BA0621F007063B2 /* Moving to the end.swift */,
				4C3D090D2BA073E7007063B2 /* Repeat same item multiple times.swift */,
				4C52B9722BA18C85008C7A5E /* Find smallest and biggest number.swift */,
				4C52B9742BA191FB008C7A5E /* Negative image.swift */,
				4CC6A9912BA3807A0025F5DD /* Prefixes vs. Suffixes.swift */,
				4CC6A9932BA387840025F5DD /* International greetings.swift */,
				4CDA328B2BA455110090D2F0 /* Remove every vowel from a string.swift */,
				4CDA328D2BA46C6F0090D2F0 /* Is the word an isogram.swift */,
				4C03FEB22BA645A800EFB331 /* Get the century.swift */,
				4C03FEB62BA64D0400EFB331 /* Vowel replacer.swift */,
				4CE540452BA9774B00280A3F /* FInd the odd integer.swift */,
				4CE540472BA9886100280A3F /* Nth smallest integer.swift */,
				4C67A1D92BAAD7970022B704 /* Numbers to arrays and vice versa.swift */,
				4C67A1DB2BAAEEFD0022B704 /* Sort numbers in ascending order.swift */,
				4C67A1DD2BAC1E8C0022B704 /* Squares and cubes.swift */,
				4C67A1DF2BAC26940022B704 /* X and Y coordinates.swift */,
				4C624DC62BAF11E500388AC8 /* String contains only identical characters.swift */,
				4C624DC82BAF143C00388AC8 /* Count ones in 2D Array.swift */,
				4C5A5ED22BB2E70C00AA7158 /* Even odd partition.swift */,
				4C5A5ED42BB2EB7D00AA7158 /* GCD of two numbers.swift */,
				4C3886B32BB5C3540079B749 /* Upper or Lower case.swift */,
				4C3886B72BB5D0730079B749 /* Sort an array by string length.swift */,
				4C87D5202BB7169500969644 /* Xs and Os, Nobody knows.swift */,
				4C87D5242BB7207100969644 /* Product divisible by sum.swift */,
				4CDED7C42BBC1C7D00AD2B60 /* Sum of all evens in matrix.swift */,
				4CDED7C62BBC226A00AD2B60 /* Smaller string number.swift */,
				4CAFB6AE2BBD5561007C7B20 /* Convenience store.swift */,
				4CAFB6B02BBD5DA9007C7B20 /* Hamming distance.swift */,
				4CCC0C862BBEA32700DED27E /* Remove special characters from string.swift */,
				4CCC0C8C2BBECD0900DED27E /* Sort numbers in descending order.swift */,
				4C00F76F2BBFF05B00161C5D /* Say hello to guests.swift */,
				4C00F7732BBFF8BB00161C5D /* Four passengers and driver.swift */,
				4C4859BC2BC437F00089C9A8 /* Total volume of all boxes.swift */,
				4C4859BE2BC439C30089C9A8 /* Days in month.swift */,
				4C3A4D0F2BC57C650040D7F6 /* Remove first and last char.swift */,
				4C3A4D132BC57FE20040D7F6 /* FInd the missing number.swift */,
				4C405D792BC6671500AC4769 /* Older than me.swift */,
				4C405D7D2BC67E2400AC4769 /* Convert to decimal notation.swift */,
				4CCB4FC82BC929D100C72C5D /* Sum of digits between two numbers.swift */,
				4CCB4FCA2BC93F0700C72C5D /* Return the highest and lowest numbers.swift */,
				4C6CD7C12BCAA5BB00560F83 /* Calculate the mean.swift */,
				4C6CD7C32BCAA95700560F83 /* Return first and last elements in array.swift */,
				4CB254D02BCC44DE003535FF /* Capitalize the first letter of each word.swift */,
				4CB254D22BCC4D19003535FF /* ATM PIN code validation.swift */,
				4CE545102BCEB16A009A5359 /* Returning an Add function.swift */,
				4CE545122BCECA27009A5359 /* Adding Suffixes.swift */,
			);
			path = Edabit;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		4C35E0C32B4B2AC3009ECE9A /* Edabit */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 4C35E0CB2B4B2AC3009ECE9A /* Build configuration list for PBXNativeTarget "Edabit" */;
			buildPhases = (
				4C35E0C02B4B2AC3009ECE9A /* Sources */,
				4C35E0C12B4B2AC3009ECE9A /* Frameworks */,
				4C35E0C22B4B2AC3009ECE9A /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Edabit;
			productName = Edabit;
			productReference = 4C35E0C42B4B2AC3009ECE9A /* Edabit */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		4C35E0BC2B4B2AC3009ECE9A /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = 1;
				LastSwiftUpdateCheck = 1510;
				LastUpgradeCheck = 1510;
				TargetAttributes = {
					4C35E0C32B4B2AC3009ECE9A = {
						CreatedOnToolsVersion = 15.1;
					};
				};
			};
			buildConfigurationList = 4C35E0BF2B4B2AC3009ECE9A /* Build configuration list for PBXProject "Edabit" */;
			compatibilityVersion = "Xcode 14.0";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 4C35E0BB2B4B2AC3009ECE9A;
			productRefGroup = 4C35E0C52B4B2AC3009ECE9A /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				4C35E0C32B4B2AC3009ECE9A /* Edabit */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		4C35E0C02B4B2AC3009ECE9A /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				4CE540462BA9774B00280A3F /* FInd the odd integer.swift in Sources */,
				4CE545132BCECA27009A5359 /* Adding Suffixes.swift in Sources */,
				4C46C79F2B8F36E700558986 /* Matchstick houses.swift in Sources */,
				4C13AFC92B876462009D461F /* Purge and organize.swift in Sources */,
				4C8231032B7F847C008C39B2 /* Find the smallest number in array.swift in Sources */,
				4C10BE252B7CAF3D0058C33A /* Return number of parameters.swift in Sources */,
				4C828FAD2B56D0CE0042153A /* Correct the Mistakes.swift in Sources */,
				4CAFB6AF2BBD5561007C7B20 /* Convenience store.swift in Sources */,
				4CFF792E2B5FF4CE006F2004 /* Are the number if equal.swift in Sources */,
				4CCB4FC92BC929D100C72C5D /* Sum of digits between two numbers.swift in Sources */,
				4C35E73D2B726B30002BFF78 /* No conditionals.swift in Sources */,
				4CA90F2C2B6A4CBB00397D78 /* Buggy Code - Part 3.swift in Sources */,
				4C5C60A02B88C2F2008B9723 /* To the power.swift in Sources */,
				4C6ADD0D2B4E8EF50087971C /* Find the Perimeter of a Rectangle.swift in Sources */,
				4C1A5F6C2B6FD1D000B460F0 /* Return a string as integer.swift in Sources */,
				4CE68A562B9B3ABD004B0285 /* Chat room status.swift in Sources */,
				4CB70C822B73C5D400E688DB /* Buggy code - Part 5.swift in Sources */,
				4C4B3C722B6939E8005A1EE5 /* Frames per second.swift in Sources */,
				4C10BE292B7CB8550058C33A /* Average of elements as whole number.swift in Sources */,
				4CDA328E2BA46C6F0090D2F0 /* Is the word an isogram.swift in Sources */,
				4C5462292B6BB03F0045E851 /* Return negative.swift in Sources */,
				4CD39F872B9735A700D4837C /* Sum of two smallest numbers.swift in Sources */,
				4CA90F322B6A661700397D78 /* Buggy code - Part 4.swift in Sources */,
				4C624DC92BAF143C00388AC8 /* Count ones in 2D Array.swift in Sources */,
				4C3DFB332B8E3DD400C065B1 /* Capitalize the names.swift in Sources */,
				4C22F1B52B79725100386740 /* Difference of max and min numbers in array.swift in Sources */,
				4C134C1B2B62A4040002ED5E /* Is the string empty.swift in Sources */,
				4C405D7E2BC67E2400AC4769 /* Convert to decimal notation.swift in Sources */,
				4C87F73C2B7E45A800DB2E31 /* How much is true.swift in Sources */,
				4C3B72FA2B5D9D8A00B84120 /* The farm problem.swift in Sources */,
				4C3DFB2F2B8E0FE100C065B1 /* Omnipresent value.swift in Sources */,
				4CFB816A2B854AAA00D17CFF /* Chinese zodiac.swift in Sources */,
				4CD43B6B2B6F9F2B00F5AA79 /* The modulus operator function.swift in Sources */,
				4C3A4D142BC57FE20040D7F6 /* FInd the missing number.swift in Sources */,
				4C2771D52B61753800130332 /* Football Points.swift in Sources */,
				4C6780B72B5AB020006E4691 /* Concatenate First and Last Name into String.swift in Sources */,
				4C67A1DC2BAAEEFD0022B704 /* Sort numbers in ascending order.swift in Sources */,
				4C37AC922B7AB6D7000B6062 /* Eliminate odd numbers within array.swift in Sources */,
				4CB99E4A2B63EE7E002FC554 /* Minimal1- If boolean then boolean.swift in Sources */,
				4C7659782B4D5E6E0023DF20 /* Area of a Triangle.swift in Sources */,
				4C8952E42B985F6D0026A546 /* Find the second largest number.swift in Sources */,
				4C6CD7C42BCAA95700560F83 /* Return first and last elements in array.swift in Sources */,
				4C35E7372B723EC0002BFF78 /* Nth even number.swift in Sources */,
				4C3B72FE2B5DA26500B84120 /* Boolean to String conversion.swift in Sources */,
				4C13AFCD2B876ABA009D461F /* Calculate determinant 2x2 Matrix.swift in Sources */,
				4CD43B692B6F9B6B00F5AA79 /* Check if array contains a number.swift in Sources */,
				4C3D090E2BA073E7007063B2 /* Repeat same item multiple times.swift in Sources */,
				4CD39F8B2B97957100D4837C /* Secret society.swift in Sources */,
				4C22F1BB2B797A7F00386740 /* Check if the same case.swift in Sources */,
				4C8231052B7F8681008C39B2 /* Generate countdown of numbers in array.swift in Sources */,
				4C854A462B8391C80068A01D /* Multiply by length.swift in Sources */,
				4CF7B5612B7656F800F0D2FB /* Is word singular or plural.swift in Sources */,
				4C26AAAB2B52AB340038E064 /* Buggy Code - Part 1.swift in Sources */,
				4C85F45A2B710A5F00856305 /* String to integer and vice versa.swift in Sources */,
				4CA90F2A2B6A45BD00397D78 /* Is string odd or even.swift in Sources */,
				4C10BE1D2B7B63590058C33A /* Tile teamwork tactics.swift in Sources */,
				4CC3A66D2B6D382200C72829 /* Return last element in array.swift in Sources */,
				4CF7B55D2B7645A400F0D2FB /* Get the sum of all array elements.swift in Sources */,
				4C10BE232B7CAAC90058C33A /* Get word count.swift in Sources */,
				4C03FEB72BA64D0400EFB331 /* Vowel replacer.swift in Sources */,
				4CE540482BA9886100280A3F /* Nth smallest integer.swift in Sources */,
				4C9DA8852B594F11003E4612 /* Basketball Points.swift in Sources */,
				4C03FEB32BA645A800EFB331 /* Get the century.swift in Sources */,
				4C85F4562B7102C100856305 /* Compare strings by count of characters.swift in Sources */,
				4CA90F262B6A3C1A00397D78 /* Is the number even or odd.swift in Sources */,
				4CC3A66B2B6D28E000C72829 /* Free coffee cups.swift in Sources */,
				4CB16ECB2B57BB82006EC617 /* Name Greeting.swift in Sources */,
				4CB70C802B73A06900E688DB /* Fix basic calculator.swift in Sources */,
				4C52B9752BA191FB008C7A5E /* Negative image.swift in Sources */,
				4C3A4D102BC57C650040D7F6 /* Remove first and last char.swift in Sources */,
				4CCC0C872BBEA32700DED27E /* Remove special characters from string.swift in Sources */,
				4C3886B82BB5D0730079B749 /* Sort an array by string length.swift in Sources */,
				4C85F4542B70FC6A00856305 /* Unlucky 13.swift in Sources */,
				4C87F73E2B7E476E00DB2E31 /* Human, cat and dog years.swift in Sources */,
				4C5F312A2B5428CD0013E75E /* Inches to Feet.swift in Sources */,
				4CA90F302B6A62B000397D78 /* Area of rectangle.swift in Sources */,
				4C37AC962B7ABCF5000B6062 /* Buggy Code.swift in Sources */,
				4C9DA8872B595D22003E4612 /* Divides Evenly.swift in Sources */,
				4CC0FB892B86644600F4D774 /* Integer digits count.swift in Sources */,
				4C26AAAD2B52AD7D0038E064 /* Return the first element in array.swift in Sources */,
				4CC6A9942BA387840025F5DD /* International greetings.swift in Sources */,
				4CB99E4C2B63F0A8002FC554 /* Fix the expression.swift in Sources */,
				4CF7B5632B76591300F0D2FB /* Find total number of digits the number has.swift in Sources */,
				4CDA328C2BA455110090D2F0 /* Remove every vowel from a string.swift in Sources */,
				4C8231072B7F8A8F008C39B2 /* Amplify the multiples of four.swift in Sources */,
				4CB254D32BCC4D19003535FF /* ATM PIN code validation.swift in Sources */,
				4C3DFB312B8E3B2D00C065B1 /* Strange pair.swift in Sources */,
				4C46C7A52B8F59C600558986 /* How many solutions quadratic have.swift in Sources */,
				4C621C632B868F3E0046237F /* Absolute sum.swift in Sources */,
				4C854A482B83933E0068A01D /* String a palindrome.swift in Sources */,
				4C3D090A2BA0621F007063B2 /* Moving to the end.swift in Sources */,
				4C35E0CF2B4B2BC8009ECE9A /* Return Sum of Two Numbers.swift in Sources */,
				4C46C7A12B8F39BD00558986 /* Exists a number higher.swift in Sources */,
				4CB16ECD2B57BD4F006EC617 /* Check integer if divisible.swift in Sources */,
				4C37508F2B515AC800318140 /* Convert Hours into Seconds.swift in Sources */,
				4C828FAB2B56CC1A0042153A /* Maximum Edge of a triangle.swift in Sources */,
				4C4859BD2BC437F00089C9A8 /* Total volume of all boxes.swift in Sources */,
				4C5A5ED32BB2E70C00AA7158 /* Even odd partition.swift in Sources */,
				4C10BE2D2B7CD17A0058C33A /* Max weight allowed.swift in Sources */,
				4C8231012B7F8289008C39B2 /* Even number generator.swift in Sources */,
				4C10BE272B7CB24A0058C33A /* Next element in sequence.swift in Sources */,
				4C12D1EE2B9609BA003FCA65 /* Shuffle the name.swift in Sources */,
				4C52B9732BA18C85008C7A5E /* Find smallest and biggest number.swift in Sources */,
				4C00F7702BBFF05B00161C5D /* Say hello to guests.swift in Sources */,
				4C34BA272B500BB000F60A9E /* Are the numbers equal.swift in Sources */,
				4C6780B92B5AB221006E4691 /* Sum of polygon angles.swift in Sources */,
				4C3886B42BB5C3540079B749 /* Upper or Lower case.swift in Sources */,
				4C22F1B92B79778600386740 /* FizzBuzz Interview Question.swift in Sources */,
				4C37AC8C2B7AAEE4000B6062 /* Find the index.swift in Sources */,
				4C37508D2B5156EE00318140 /* Return the remainder from two numbers.swift in Sources */,
				4C7B8C912B935B9900483B5A /* Little dictionary.swift in Sources */,
				4C621C5F2B8678C60046237F /* Total number of unique characters.swift in Sources */,
				4C8952E22B9855F80026A546 /* Odd up, even down - N times.swift in Sources */,
				4C5F31282B5427BF0013E75E /* Power Calculator.swift in Sources */,
				4C12D1EC2B95F660003FCA65 /* Chocolate dilemma.swift in Sources */,
				4CD066D72B69A7CA008952D1 /* Movie theatre admittance.swift in Sources */,
				4C37AC8E2B7AB085000B6062 /* Convert numbers to string of dashes.swift in Sources */,
				4C13AFCB2B8765E4009D461F /* Factorize number.swift in Sources */,
				4C35E7392B725C1B002BFF78 /* Hello-Hello World-World.swift in Sources */,
				4C5CCD972B7A65060047090B /* Missing third angle.swift in Sources */,
				4C37AC942B7ABAAC000B6062 /* Hurdle jump.swift in Sources */,
				4C9C54942B6EDFBE008BD33C /* Check string for spaces.swift in Sources */,
				4C87D5252BB7207100969644 /* Product divisible by sum.swift in Sources */,
				4CD9C9EE2B5EBFCA00DD33FA /* Return something to me.swift in Sources */,
				4C621C672B86B6FE0046237F /* Four letter strings.swift in Sources */,
				4C5C609C2B88B492008B9723 /* Sum of cubes.swift in Sources */,
				4C67A1DA2BAAD7970022B704 /* Numbers to arrays and vice versa.swift in Sources */,
				4CA90F342B6A687900397D78 /* Find out the leap year.swift in Sources */,
				4CAFB6B12BBD5DA9007C7B20 /* Hamming distance.swift in Sources */,
				4C6ADD0B2B4E8C3F0087971C /* Convert Minutes into Seconds.swift in Sources */,
				4CCB4FCB2BC93F0700C72C5D /* Return the highest and lowest numbers.swift in Sources */,
				4C1AD32A2B5D9B46007244B3 /* Convert hours and minutes into seconds.swift in Sources */,
				4C37AC902B7AB363000B6062 /* Count syllables.swift in Sources */,
				4C1AEB4C2B55E1E7001093F4 /* Basic Variable Assignment.swift in Sources */,
				4CF7B55F2B76481C00F0D2FB /* Convert number to month name.swift in Sources */,
				4C10BE212B7B74D80058C33A /* Calculate the profit.swift in Sources */,
				4C9C54922B6ECE08008BD33C /* Slice of pie.swift in Sources */,
				4CFF79302B5FF70B006F2004 /* Concatenating two integer arrays.swift in Sources */,
				4C8F28BE2B4C5901006373C7 /* Convert Age to Days.swift in Sources */,
				4C00F7742BBFF8BB00161C5D /* Four passengers and driver.swift in Sources */,
				4C34BA252B500A8000F60A9E /* Is the number less or equal to zero.swift in Sources */,
				4CFF79322B5FF8A3006F2004 /* Multiple of 100.swift in Sources */,
				4CDED7C72BBC226A00AD2B60 /* Smaller string number.swift in Sources */,
				4CFB81662B853E3200D17CFF /* Additive inverse.swift in Sources */,
				4C4B58752B74E265005F61B9 /* Maximum difference.swift in Sources */,
				4CB70C842B73CC7000E688DB /* Recreating abs() function.swift in Sources */,
				4C2771D32B616BCF00130332 /* less than 100.swift in Sources */,
				4CB70C862B73CE8A00E688DB /* Amazing Edabit.swift in Sources */,
				4C4B3C742B693F53005A1EE5 /* Flip the boolean.swift in Sources */,
				4C67A1E02BAC26940022B704 /* X and Y coordinates.swift in Sources */,
				4CC6A9922BA3807A0025F5DD /* Prefixes vs. Suffixes.swift in Sources */,
				4CE545112BCEB16A009A5359 /* Returning an Add function.swift in Sources */,
				4C405D7A2BC6671500AC4769 /* Older than me.swift in Sources */,
				4CB254D12BCC44DE003535FF /* Capitalize the first letter of each word.swift in Sources */,
				4C4859BF2BC439C30089C9A8 /* Days in month.swift in Sources */,
				4C624DC72BAF11E500388AC8 /* String contains only identical characters.swift in Sources */,
				4C3B73002B5DA42D00B84120 /* Profitable Gamble.swift in Sources */,
				4C85F4582B71086C00856305 /* Re-form the word.swift in Sources */,
				4C621C652B869CCE0046237F /* Count instances of character in string.swift in Sources */,
				4C87F73A2B7E43B200DB2E31 /* Find the discount.swift in Sources */,
				4C7B8C932B935CAA00483B5A /* Filter by digit length.swift in Sources */,
				4C46C7A32B8F416A00558986 /* Reverse order of words.swift in Sources */,
				4C54622B2B6BB56B0045E851 /* Reverse an array.swift in Sources */,
				4C67A1DE2BAC1E8C0022B704 /* Squares and cubes.swift in Sources */,
				4C3DFB2D2B8E0A8000C065B1 /* Minimum removals to make sum even.swift in Sources */,
				4C87F7382B7E41F900DB2E31 /* Alphabet soup.swift in Sources */,
				4CF11DA22B99D02B0044F45B /* Reverse order of string.swift in Sources */,
				4CD9C9EC2B5EB53E00DD33FA /* Pair Management.swift in Sources */,
				4C10BE1F2B7B702D0058C33A /* Find the bug; checking even numbers.swift in Sources */,
				4C35E73B2B726854002BFF78 /* Triangular number sequence.swift in Sources */,
				4CA90F282B6A436000397D78 /* Two makes ten.swift in Sources */,
				4CF7B5572B763C4000F0D2FB /* Leap year function.swift in Sources */,
				4C5A5ED52BB2EB7D00AA7158 /* GCD of two numbers.swift in Sources */,
				4CCC0C8D2BBECD0900DED27E /* Sort numbers in descending order.swift in Sources */,
				4C87D5212BB7169500969644 /* Xs and Os, Nobody knows.swift in Sources */,
				4C5C609A2B88AF04008B9723 /* Equality of 3 values.swift in Sources */,
				4C22F1B32B79712D00386740 /* Largest number in array.swift in Sources */,
				4CFB81682B85409F00D17CFF /* Between words.swift in Sources */,
				4C76597A2B4D62AB0023DF20 /* Return Next Number from the Integer Passed.swift in Sources */,
				4C5C609E2B88B725008B9723 /* Odd up, even down.swift in Sources */,
				4CFB81642B84E67300D17CFF /* Filter repeating character strings.swift in Sources */,
				4CE68A542B9B3510004B0285 /* Hitting the jackpot.swift in Sources */,
				4CDED7C52BBC1C7D00AD2B60 /* Sum of all evens in matrix.swift in Sources */,
				4CF7B5592B763F3100F0D2FB /* Half, Quarter and Eighth.swift in Sources */,
				4CF11DA62B99F3000044F45B /* Check factors.swift in Sources */,
				4C134C1D2B62A7770002ED5E /* Using the && Operator.swift in Sources */,
				4C621C612B8688210046237F /* Same number of unique elements.swift in Sources */,
				4CF7B55B2B76417400F0D2FB /* Check if string ending match second string.swift in Sources */,
				4C13AFCF2B878EB3009D461F /* Product of all odd integers.swift in Sources */,
				4C854A442B838CFA0068A01D /* Word endings.swift in Sources */,
				4C35E0C82B4B2AC3009ECE9A /* main.swift in Sources */,
				4C37AC8A2B7AAACD000B6062 /* Add numbers from single number.swift in Sources */,
				4C6CD7C22BCAA5BB00560F83 /* Calculate the mean.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		4C35E0C92B4B2AC3009ECE9A /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MACOSX_DEPLOYMENT_TARGET = 14.2;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "DEBUG $(inherited)";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		4C35E0CA2B4B2AC3009ECE9A /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MACOSX_DEPLOYMENT_TARGET = 14.2;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
			};
			name = Release;
		};
		4C35E0CC2B4B2AC3009ECE9A /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = DD442UJ7UA;
				ENABLE_HARDENED_RUNTIME = YES;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
			};
			name = Debug;
		};
		4C35E0CD2B4B2AC3009ECE9A /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = DD442UJ7UA;
				ENABLE_HARDENED_RUNTIME = YES;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		4C35E0BF2B4B2AC3009ECE9A /* Build configuration list for PBXProject "Edabit" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				4C35E0C92B4B2AC3009ECE9A /* Debug */,
				4C35E0CA2B4B2AC3009ECE9A /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		4C35E0CB2B4B2AC3009ECE9A /* Build configuration list for PBXNativeTarget "Edabit" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				4C35E0CC2B4B2AC3009ECE9A /* Debug */,
				4C35E0CD2B4B2AC3009ECE9A /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 4C35E0BC2B4B2AC3009ECE9A /* Project object */;
}
